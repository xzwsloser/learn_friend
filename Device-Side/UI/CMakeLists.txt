cmake_minimum_required(VERSION 3.16)

project(
  UI
  VERSION 0.1
  LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)

file(GLOB_RECURSE ${QT_MATERIAL_SRC}
     "${CMAKE_CURRENT_SOURCE_DIR}/sdk/components/*.cpp")
file(GLOB_RECURSE ${QT_MATERIAL_INC}
     "${CMAKE_CURRENT_SOURCE_DIR}/sdk/components/*.h")

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/sdk/components)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/sdk/components/layouts)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/sdk/components/lib)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/sdk/components/keyboard)

set(PROJECT_SOURCES main.cpp loginpage.cpp loginpage.h loginpage.ui
                    mainpage.cpp mainpage.h mainpage.ui
                    ${QT_MATERIAL_SRC} ${QT_MATERIAL_INC})

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
  qt_add_executable(UI MANUAL_FINALIZATION ${PROJECT_SOURCES})
  # Define target properties for Android with Qt 6 as: set_property(TARGET UI
  # APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
  # ${CMAKE_CURRENT_SOURCE_DIR}/android) For more information, see
  # https://doc.qt.io/qt-6/qt-add-executable.html#target-creation
else()
  if(ANDROID)
    add_library(UI SHARED ${PROJECT_SOURCES})
    # Define properties for Android with Qt 5 after find_package() calls as:
    # set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
  else()
    add_executable(UI ${PROJECT_SOURCES} resource.qrc mainpage.h mainpage.cpp
                      mainpage.ui
                      sdk/components/keyboard/softkeyboard.h
                      sdk/components/keyboard/softkeyboard.cpp
                      sdk/components/qtmaterialavatar.cpp
                      pagemanager.h
                      pagemanager.cpp
                      watcherpage.h watcherpage.cpp watcherpage.ui
                      promptpage.h promptpage.cpp promptpage.ui
                      knowledgepage.h knowledgepage.cpp knowledgepage.ui
                      sdk/components/qtmaterialtabs.cpp
                      knowledgeretrievepage.h knowledgeretrievepage.cpp knowledgeretrievepage.ui
                    )
  endif()
endif()

target_link_libraries(UI PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)
if (CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64|arm64")
        target_link_libraries(UI PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/sdk/stdlib/libcomponents_arm.a)
else()
        target_link_libraries(UI PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/sdk/stdlib/libcomponents.a)
endif()

# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1. If
# you are developing for iOS or macOS you should consider setting an explicit,
# fixed bundle identifier manually though.
if(${QT_VERSION} VERSION_LESS 6.1.0)
  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.UI)
endif()
set_target_properties(
  UI
  PROPERTIES ${BUNDLE_ID_OPTION} MACOSX_BUNDLE_BUNDLE_VERSION
             ${PROJECT_VERSION} MACOSX_BUNDLE_SHORT_VERSION_STRING
             ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR} MACOSX_BUNDLE
             TRUE WIN32_EXECUTABLE
             TRUE)

include(GNUInstallDirs)
install(
  TARGETS UI
  BUNDLE DESTINATION .
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

if(QT_VERSION_MAJOR EQUAL 6)
  qt_finalize_executable(UI)
endif()
